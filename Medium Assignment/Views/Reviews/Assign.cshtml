@using Medium_Assignment.Models

@model Medium_Assignment.Models.ReviewAssignViewModel


@{AuthDetails authDetails = (AuthDetails)Context.Session["AuthDetails"];}


@{
    ViewBag.Title = "Assign Review";
}

<h2>Assign Review</h2>

<style>
    .field-validation-error {
        color: #a94442;
        background-color: #cdeefd;
    }
</style>

<form id="form">
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(m => m.Id)
        @Html.TextBoxFor(m => m.Id, new { @class = "form-control text-danger", @disabled = "disabled", id = "Id" })
        @Html.ValidationMessageFor(m => m.Id)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.EmployeeIds)
        <p> </p>

        @Html.ListBoxFor(m => m.EmployeeIds, new List<SelectListItem>(),
       new { @class = "listbox form-control text-danger", id = "Employees", @data_width = "fit" })
    @Html.ValidationMessageFor(m => m.EmployeeIds)
</div>

    <div class="form-group">
        @Html.LabelFor(m => m.ReviewerId)
        @Html.DropDownListFor(m => m.ReviewerId, new List<SelectListItem>(), "Select Reviewer", new { @class = "form-control text-danger", id = "Reviewer" })
        @Html.ValidationMessageFor(m => m.ReviewerId)
    </div>

</form>

<button type="submit" id="submit" class="btn btn-primary">
    Assign
</button>

@section Scripts {

    <script>

        function ReviewAssignModel() {
            this.Id = $("#Id").val();
            this.EmployeeIds = [];
            this.ReviewerId = 0;

        }

        function getFormData() {
            return $.ajax({
                type: "get",
                url: "https://localhost:44357/api/employees/",
                datatype: "json",
                traditional: "true",
                headers: {"Authorization": '@("Bearer " + authDetails.AccessToken)'},

                error: function (jqXHR, status, err) {
                    alert(jqXHR.responseJSON.ModelState[""]);
                    
                    console.log(jqXHR.responseJSON);
                    console.log(jqXHR);
                    console.log(status);
                    console.log(err);
                    alert("Error creating new record.");
                }




            });
        }

        function populateForm(data) {
            var employees = data.Employees;

            for (var i = 0; i < employees.length; i++) {               
                $("#Employees").append("<option value=" + employees[i].Id + ">" + employees[i].DisplayName + "</option>");
                $("#Reviewer").append("<option value=" + employees[i].Id + ">" + employees[i].DisplayName + "</option>");

            }

            $('.listbox').selectpicker('refresh');

            return employees;

        }

        function submitForm() {
            $("#form").validate({
                messages: {
                    Reviewer: {
                        ReviewerNotInEmployees: "Selected Reviewer must not be in the selected list of employees."
                    }
                }
            });


            if (!$("#form").valid()) {
                return;
            }

            if ($("#Employees").val().includes($("#Reviewer").val().toString())) {
                alert("Reviewer cannot be part of selected list of employees.");
                return;
            }


            var model = new ReviewAssignModel();

            model.EmployeeIds = $("#Employees").val();
            model.ReviewerId = $("#Reviewer").val();

            $.ajax({
                type: "put",
                url: "https://localhost:44357/api/reviews/assign/" + $("#Id").val(),
                data: model,
                datatype: "json",
                traditional: "true",
                headers: {"Authorization": '@("Bearer " + authDetails.AccessToken)'},
                success: function (data) {
                    alert("Posted.");
                    window.location.href = "https://localhost:44335/reviews/";

                },

                error: function (jqXHR, status, err) {
                    alert(jqXHR.responseJSON.ModelState[""]);
                    
                    console.log(jqXHR.responseJSON);
                    console.log(jqXHR);
                    console.log(status);
                    console.log(err);
                    alert("Error creating new record.");
                }




            });

        }

        function addValidations() {
            $("#form").rules('add',
                {
                    Reviewer: {
                        ReviewerNotInEmployees: function (element) {
                            return !$("#Employees").val().includes($("#Reviewer").val().toString())
                        }
                    }
                });
        }

        $(document).ready(function () {
            addValidations();
            var employees = [];
            getFormData()
                .done((data) => populateForm(data))
                .done((data) => { employees = data; });

            $("#submit").click(submitForm);

            


        });


    </script>

}

