@using Medium_Assignment.Models

@model Medium_Assignment.Models.ReviewDetailsViewModel


@{AuthDetails authDetails = (AuthDetails)Context.Session["AuthDetails"];}


@{
    ViewBag.Title = "</";
}

<h2>Details</h2>

<style>
    .field-validation-error {
        color: #a94442;
        background-color: #cdeefd;
    }
</style>

<form id="form">
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(m => m.Id, new { id = "Id"})

    <div class="form-group">
        @Html.LabelFor(m => m.Agenda)
        @Html.TextBoxFor(m => m.Agenda, new { @class = "form-control text-danger", @disabled = "disabled", id = "Agenda" })
        @Html.ValidationMessageFor(m => m.Agenda)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ReviewCycleStartDate)
        @Html.TextBoxFor(m => m.ReviewCycleStartDate, new { @class = "form-control text-danger", @disabled = "disabled", id = "ReviewCycleStartDate" })
        @Html.ValidationMessageFor(m => m.ReviewCycleStartDate)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ReviewCycleEndDate)
        @Html.TextBoxFor(m => m.ReviewCycleEndDate, new { @class = "form-control text-danger", @disabled = "disabled", id = "ReviewCycleEndDate" })
        @Html.ValidationMessageFor(m => m.ReviewCycleEndDate)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.MinRate)
        @Html.TextBoxFor(m => m.MinRate, new { @class = "form-control text-danger", @disabled = "disabled", id = "MinRate" })
        @Html.ValidationMessageFor(m => m.MinRate)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.MaxRate)
        @Html.TextBoxFor(m => m.MaxRate, new { @class = "form-control text-danger", @disabled = "disabled", id = "MaxRate" })
        @Html.ValidationMessageFor(m => m.MaxRate)
    </div>



    <div class="form-group">
        @Html.LabelFor(m => m.Description)
        @Html.TextAreaFor(m => m.Description, new { @class = "form-control text-danger", @disabled = "disabled", id = "Description" })
        @Html.ValidationMessageFor(m => m.Description)

    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Employee)
        @Html.TextBoxFor(m => m.Employee, new { @class = "form-control text-danger ", @disabled = "disabled", id = "Employee" })
    </div>


    <div class="form-group">
        @Html.LabelFor(m => m.Reviewer)
        @Html.TextBoxFor(m => m.Reviewer, new { @class = "form-control text-danger ", @disabled = "disabled", id = "Reviewer" })
    </div>


    <div class="form-group">
        @Html.LabelFor(m => m.Rating)
        @Html.TextBoxFor(m => m.Rating, new { @class = "form-control text-danger ", @disabled = "disabled", id = "Rating" })
        @Html.ValidationMessageFor(m => m.Rating)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Feedback)
        @Html.TextBoxFor(m => m.Feedback, new { @class = "form-control text-danger", @disabled = "disabled", id = "Feedback" })
        @Html.ValidationMessageFor(m => m.Feedback)
    </div>


</form>

@section Scripts {
    
    <script>
        function ReviewDetailsModel() {
            this.Agenda = "";
            this.ReviewCycleStartDate = "";
            this.ReviewCycleEndDate = "";
            this.MinRate = 0;
            this.MaxRate = 0;
            this.Description = "";
            this.Employee = "";
            this.Reviewer = "";
            this.Rating = 0;
            this.Feedback = "";
            this.ReviewStatusId = 0;
        }

        function createModel(data, model) {
            model.Agenda = data.Agenda;
            model.ReviewCycleStartDate = data.ReviewCycleStartDate;
            model.ReviewCycleEndDate = data.ReviewCycleEndDate;
            model.MinRate = data.MinRate;
            model.MaxRate = data.MaxRate;
            model.Description = data.Description;
            model.Employee = data.Employee;
            model.Reviewer = data.Reviewer;
            model.Rating = data.Rating;
            model.Feedback = data.Feedback;
            model.ReviewStatusId = data.ReviewStatusId;

            return model;
        }

        function populateForm(model) {

            $("#Agenda").val(model.Agenda); 
            $("#ReviewCycleStartDate").val(new Date(model.ReviewCycleStartDate).toLocaleDateString("en-US"));
            $("#ReviewCycleEndDate").val(new Date(model.ReviewCycleStartDate).toLocaleDateString("en-US"));
            $("#MinRate").val(model.MinRate);
            $("#MaxRate").val(model.MaxRate);
            $("#Description").val(model.Description);
            $("#Employee").val(model.Employee);
            $("#Reviewer").val(model.Reviewer);
            $("#Rating").val(model.Rating);
            $("#Feedback").val(model.Feedback);

            hideElements(model);
        }

        function getFormData() {
            return $.ajax({
                type: "get",
                url: "https://localhost:44357/api/reviews/" + $("#Id").val(),
                datatype: "json",
                traditional: "true",
                headers: {"Authorization": '@("Bearer " + authDetails.AccessToken)'},

                error: function (jqXHR, status, err) {
                    alert(jqXHR.responseJSON.ModelState[""]);

                    console.log(jqXHR.responseJSON);
                    console.log(jqXHR);
                    console.log(status);
                    console.log(err);
                    alert("Error creating new record.");
                }




            });
        }

        function hideElements(model) {
            switch (model.ReviewStatusId) {
                case 1:
                    $("#Employee").parent().hide();
                    $("#Reviewer").parent().hide();
                    $("#Rating").parent().hide();
                    $("#Feedback").parent().hide();
                    break;
                case 2:
                    $("#Rating").parent().hide();
                    $("#Feedback").parent().hide();
                    break;
                case 3:
                    break;
                default:
                    break;

            }
        }

        $(document).ready(function () {
            let model = new ReviewDetailsModel();
            getFormData()
                .done((data) => { createModel(data, model); populateForm(model) });
        });

    </script>
    
}