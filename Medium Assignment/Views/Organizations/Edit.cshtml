@model Medium_Assignment.Models.OrganizationEditViewModel

@using Medium_Assignment.Models

@{AuthDetails authDetails = (AuthDetails)Context.Session["AuthDetails"];}

@{
    ViewBag.Title = "Edit";
}

<style>

    .left {
        float: left;
        width: 50%;
    }

    .right {
        float: right;
        width: 50%;
    }

    .field-validation-error {
        color: #a94442;
        background-color: #cdeefd;
    }
</style>

<h2>Edit Organization</h2>



<form id="form">

    @Html.AntiForgeryToken()

    @Html.ValidationSummary(false, "", new { @class = "text-danger", id = "ValidationSummary" })

    @Html.HiddenFor(m => m.Id, new { id = "Id" })

    <div class="left">
        <div class="form-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control text-danger", id = "Name" })
            @Html.ValidationMessageFor(m => m.Name)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.PhoneNumber)
            @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control text-danger", id = "PhoneNumber" })
            @Html.ValidationMessageFor(m => m.PhoneNumber)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Email)
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control text-danger", id = "Email" })
            @Html.ValidationMessageFor(m => m.Email)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.UserName)
            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control text-danger", id = "UserName" })
            @Html.ValidationMessageFor(m => m.UserName)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Address1)
            @Html.TextBoxFor(m => m.Address1, new { @class = "form-control text-danger", id = "Address1" })
            @Html.ValidationMessageFor(m => m.Address1)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Address2)
            @Html.TextBoxFor(m => m.Address2, new { @class = "form-control text-danger", id = "Address2" })
            @Html.ValidationMessageFor(m => m.Address2)
        </div>
    </div>

    <div class="right">

        <div class="form-group">
            @Html.LabelFor(m => m.CountryId)
            @Html.DropDownListFor(m => m.CountryId, new List<SelectListItem>(), "Select Country", new { @class = "form-control text-danger", id = "Countries", })
            @Html.ValidationMessageFor(m => m.CountryId)

        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.StateId)
            @Html.DropDownListFor(m => m.StateId, new List<SelectListItem>(), "Select State", new { @class = "form-control text-danger", id = "States" })
            @Html.ValidationMessageFor(m => m.StateId)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CityId)
            @Html.DropDownListFor(m => m.CityId, new List<SelectListItem>(), "Select City", new { @class = "form-control text-danger", id = "Cities" })
            @Html.ValidationMessageFor(m => m.CityId)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Status)
        </div>

        <div class="form-group">
            @Html.RadioButtonFor(m => m.Status, "Active", new { id = "Status" }) Active
            @Html.RadioButtonFor(m => m.Status, "Inactive", new { id = "Status" }) Inactive
        </div>

        <div class="form-group">
            @Html.ValidationMessageFor(m => m.Status)

        </div>



        <div class="form-group">
            @Html.LabelFor(m => m.Description)
            @Html.TextAreaFor(m => m.Description, new { @class = "form-control text-danger", id = "Description" })
            @Html.ValidationMessageFor(m => m.Description)
        </div>



    </div>

</form>

<div class="right">
    <button type="submit" , id="submit" class="btn btn-primary">
        Save
    </button>
</div>



@section Scripts {

    <script>

        function OrganizationEditModel() {
            this.Name = "";
            this.PhoneNumber = "";
            this.Email = "";
            this.UserName = "";
            this.Address1 = "";
            this.Address2 = "";
            this.CountryId = "";
            this.StateId = "";
            this.CityId = "";
            this.Status = "";
            this.Description = "";
        }

        function getFormData() {
            let url = "https://localhost:44357/api/organizations/" + $("#Id").val();
            return ajaxRequest("GET",[],url);
        }

        function populateModel(model, data) {
            model.Name = data.Name;
            model.PhoneNumber = data.PhoneNumber;
            model.Email = data.Email;
            model.UserName = data.UserName;
            model.Address1 = data.Address1;
            model.Address2 = data.Address2;
            model.CountryId = data.CountryId;
            model.StateId = data.StateId;
            model.CityId = data.CityId;
            model.Status = data.Status;
            model.Description = data.Description;
        }

        function populateFields(model) {
            $("#Name").val(model.Name);
            $("#PhoneNumber").val(model.PhoneNumber);
            $("#Email").val(model.Email);
            $("#UserName").val(model.UserName);
            $("#Address1").val(model.Address1);
            $("#Address2").val(model.Address2);
            $("#Countries").val(model.CountryId);
            $("#States").val(model.StateId);
            $("#Cities").val(model.CityId);
            $("[name='Status']" + "[value=" + model.Status + "]").prop('checked', true);
            $("#Description").val(model.Description);

        }

        async function populateForm(model) {
            await populateCountries();

            await getFormData().done((data) => { populateModel(model, data);});


            console.log(model);

            await populateStates(model.CountryId);

            await populateCities(model.StateId);

            populateFields(model);
        }

        function OnSuccessHandler() {
            alert("Posted.");
            window.location.href = "https://localhost:44335/organizations/";
        }

        function populateFromForm(model) {
            model.Name = $("#Name").val();
            model.PhoneNumber = $("#PhoneNumber").val();
            model.Email = $("#Email").val();
            model.UserName = $("#UserName").val();
            model.Address1 = $("#Address1").val();
            model.Address2 = $("#Address2").val();
            model.CountryId = $("#Countries").val();
            model.StateId = $("#States").val();
            model.CityId = $("#Cities").val();
            model.Status = $("[name='Status']:checked").val();
            model.Description = $("#Description").val();
        }

        function submitForm(model) {
            $("#form").validate();


            if (!$("#form").valid()) {
                return;
            }

            populateFromForm(model);


            ajaxRequest("PUT", model, "https://localhost:44357/api/organizations/" + $("#Id").val())
                .done(OnSuccessHandler);

        }

        $(document).ready(function () {
            let model = new OrganizationEditModel();
            populateForm(model);
            $("#Countries").change(() => populateStates($("#Countries").val()));
            $("#States").change(() => populateCities($("#States").val()));
            $("#submit").click(() => { submitForm(model) });
        });

    </script>

}