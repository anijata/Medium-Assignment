@model Medium_Assignment.Models.OrganizationNewViewModel

@using Medium_Assignment.Models

@{AuthDetails authDetails = (AuthDetails)Context.Session["AuthDetails"];}


@{
    ViewBag.Title = "New";
}

<h2>Create Organization</h2>

<link href="/Content/Site.css" rel="stylesheet" />

<style>

    .left {
        float: left;
        width: 50%;
    }

    .right {
        float: right;
        width: 50%;
    }

    .field-validation-error {
        color: #a94442;
        background-color: #cdeefd;
    }

</style>

<form id="form">

    @Html.AntiForgeryToken()

    @Html.ValidationSummary(false, "", new { @class = "text-danger", id = "ValidationSummary" })

    <div class="left">

        <div class="form-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control text-danger", id = "Name" })
            @Html.ValidationMessageFor(m => m.Name)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.PhoneNumber)
            @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control text-danger", id = "PhoneNumber" })
            @Html.ValidationMessageFor(m => m.PhoneNumber)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Email)
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control text-danger", id = "Email" })
            @Html.ValidationMessageFor(m => m.Email)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.UserName)
            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control text-danger", id = "UserName" })
            @Html.ValidationMessageFor(m => m.UserName)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Password)
            @Html.PasswordFor(m => m.Password, new { @class = "form-control text-danger", id = "Password" })
            @Html.ValidationMessageFor(m => m.Password)
        </div>



        <div class="form-group">
            @Html.LabelFor(m => m.Address1)
            @Html.TextBoxFor(m => m.Address1, new { @class = "form-control text-danger", id = "Address1" })
            @Html.ValidationMessageFor(m => m.Address1)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Address2)
            @Html.TextBoxFor(m => m.Address2, new { @class = "form-control text-danger", id = "Address2" })
            @Html.ValidationMessageFor(m => m.Address2)
        </div>

    </div>

    <div class="right">

        <div class="form-group">
            @Html.LabelFor(m => m.CountryId)
            @Html.DropDownListFor(m => m.CountryId, new List<SelectListItem>(), "Select Country", new { @class = "form-control text-danger", id = "Countries", })
            @Html.ValidationMessageFor(m => m.CountryId)

        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.StateId)
            @Html.DropDownListFor(m => m.StateId, new List<SelectListItem>(), "Select State", new { @class = "form-control text-danger", id = "States" })
            @Html.ValidationMessageFor(m => m.StateId)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CityId)
            @Html.DropDownListFor(m => m.CityId, new List<SelectListItem>(), "Select City", new { @class = "form-control text-danger", id = "Cities" })
            @Html.ValidationMessageFor(m => m.CityId)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Status)
        </div>

        <div class="form-group">
            @Html.RadioButtonFor(m => m.Status, "Active", new { id = "Status1" }) Active
            @Html.RadioButtonFor(m => m.Status, "Inactive", new { id = "Status2" }) Inactive
        </div>

        <div class="form-group">
            @Html.ValidationMessageFor(m => m.Status)

        </div>



        <div class="form-group">
            @Html.LabelFor(m => m.Description)
            @Html.TextAreaFor(m => m.Description, new { @class = "form-control text-danger", id = "Description" })
            @Html.ValidationMessageFor(m => m.Description)
        </div>


    </div>

    

</form>

<div class="right">
    <button type="submit" , id="submit" class="btn btn-primary">
        Save
    </button>
</div>




@section Scripts {

    <script>

        function OrganizationNewModel() {
            this.Name = "";
            this.PhoneNumber = "";
            this.Email = "";
            this.UserName = "";
            this.Password = "";
            this.Address1 = "";
            this.Address2 = "";
            this.CountryId = 0;
            this.StateId = 0;
            this.CityId = 0;
            this.Status = "";
            this.Description = "";

        }

        function onSuccessHandler() {
            window.location.href = "https://localhost:44335/organizations/";
        }

        function populateFromForm(model) {
            model.Name = $("#Name").val();
            model.PhoneNumber = $("#PhoneNumber").val();
            model.Email = $("#Email").val();
            model.UserName = $("#UserName").val();
            model.Password = $("#Password").val();
            model.Address1 = $("#Address1").val();
            model.Address2 = $("#Address2").val();
            model.CountryId = $("#Countries").val();
            model.StateId = $("#States").val();
            model.CityId = $("#Cities").val();
            model.Status = $("[name='Status']:checked").val();
            model.Description = $("#Description").val();

        }

        function submitForm(model) {
            $("#form").validate({
                debug: true
            });
        

            if (!$("#form").valid()) {
                return;
            }

            
            populateFromForm(model)

            let url = "https://localhost:44357/api/organizations/";

            ajaxRequest("POST", model, url)
                .done(onSuccessHandler);

        }

        function addValidations() {
            var pwregex = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9]).{6,}$");

            jQuery.validator.addMethod("password",
                function (value, element) {
                    return pwregex.test(value);
                }
                , "Passwords must be at least 6 characters.Passwords must have at least one non letter or digit character.Passwords must have at least one digit ('0'-'9').Passwords must have at least one uppercase ('A'-'Z').");


            $("#form").rules({
                Password: {
                    password: true
                }
            });

        }

        $(document).ready(function () {
            let model = new OrganizationNewModel();

            addValidations();

            populateCountries();

            $("#Countries").change(() => populateStates($("#Countries").val()));
            $("#States").change(() => populateCities($("#States").val()));
            $("#submit").click(() => { submitForm(model); });
        });


    </script>

}



